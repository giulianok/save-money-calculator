@mixin smoothing {
    -webkit-font-smoothing: antialiased;
    text-shadow: 1px 1px 1px rgba(0,0,0,0.004);
}
@mixin a-prop {
    &, &:hover, &:focus, &:active, &:visited {
        @content;
    }
}
@mixin background-center($image:null) {
    @if $image {
        background-image: url('#{$image}');
    }
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
}
@mixin keyframes($name) {
    @-webkit-keyframes #{$name}
    {
        @content;
    }
    @-moz-keyframes #{$name}
    {
        @content;
    }
    @-ms-keyframes #{$name}
    {
        @content;
    }
    @keyframes #{$name}
    {
        @content;
    }
}
@mixin animation ($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -webkit-animation: #{$str};
    animation: #{$str};
}
@mixin sequence($i, $end, $delay:0ms, $duration:100ms) {
    @if $i < $end {
        @while $i < $end {
            &:nth-child(#{$i}) {
                @include transition-delay($delay);
                @content;
            }
            $i: $i+1;
            $delay: $delay+$duration;
        }
    }
    @if $i > $end {
        @while $end < $i {
            &:nth-child(#{$i}) {
                @include transition-delay($delay);
                @content;
            }
            $i: ($i)-1;
            $delay: $delay+$duration;
        }
    }
}
@function ratio($ratio, $width) {
    @if $ratio == "16:9" {
        @return $width * 9 / 16
    }
    @return null
}
@mixin background-sequence($sequence) {
    $i: 1;
    @each $bg in $sequence {
        &:nth-child(#{$i}) {
            background-image: url('#{$bg}');
        }
        $i: $i+1;
    }
}
@mixin placeholder {
    ::-webkit-input-placeholder {
        @content;
    }
    :-moz-placeholder {
        /* Firefox 18- */
        
        @content;
    }
    ::-moz-placeholder {
        /* Firefox 19+ */
        
        @content;
    }
    :-ms-input-placeholder {
        @content;
    }
}
@mixin border($border: false, $border_horizontal: false, $border_bottom: false, $border_left: false) {
    $args: length($border);
    // Reset Variables Based on Argument Count
    @if $args > 1 and length(nth($border, 1)) > 1 or nth($border, 1) == none {
        @if $args == 4 {
            $border_left: nth($border, 4);
            $border_bottom: nth($border, 3);
            $border_horizontal: nth($border, 2);
            $border: nth($border, 1);
        }
        @else if $args == 3 {
            $border_bottom: nth($border, 3);
            $border_horizontal: nth($border, 2);
            $border: nth($border, 1);
        }
        @else if $args == 2 {
            $border_horizontal: nth($border, 2);
            $border: nth($border, 1);
        }
    }
    // Assign Attributes from Variables
    @if $border and $border_horizontal and $border_bottom and $border_left {
        border-top: $border;
        border-right: $border_horizontal;
        border-bottom: $border_bottom;
        border-left: $border_left;
    }
    @else if $border and $border_horizontal and $border_bottom {
        border: $border_horizontal;
        border-top: $border;
        border-bottom: $border_bottom;
    }
    @else if $border and $border_horizontal {
        border: $border;
        border-right: $border_horizontal;
        border-left: $border_horizontal;
    }
    @else {
        border: $border;
    }
}


@mixin gradient-vertical($start-color: #555, $start-transp: 1, $end-color: #333, $end-transp: 0.5, $start-percent: 0%, $end-percent: 100%) {
    $start-color: transparentize($start-color, $start-transp);
    $end-color: transparentize($end-color, $end-transp);
    background: -moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop($start-percent,$start-color), color-stop($end-percent,$end-color)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $start-color $start-percent,$end-color $end-percent); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  $start-color $start-percent,$end-color $end-percent); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  $start-color $start-percent,$end-color $end-percent); /* IE10+ */
    background: linear-gradient(to bottom,  $start-color $start-percent,$end-color $end-percent); /* W3C */
}
@mixin gradient-horizontal($start-color: #555, $start-transp: 1, $end-color: #333, $end-transp: 0.5, $start-percent: 0%, $end-percent: 100%) {
    $start-color: transparentize($start-color, $start-transp);
    $end-color: transparentize($end-color, $end-transp);
    background: -moz-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, right top, color-stop($start-percent,$start-color), color-stop($end-percent,$end-color)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(left,  $start-color $start-percent,$end-color $end-percent); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(left,  $start-color $start-percent,$end-color $end-percent); /* Opera 11.10+ */
    background: -ms-linear-gradient(left,  $start-color $start-percent,$end-color $end-percent); /* IE10+ */
    background: linear-gradient(to right,  $start-color $start-percent,$end-color $end-percent); /* W3C */
}










